// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * 
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction.
 * 
 * If the instruction specifies to read a memory value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * 
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

	PARTS:
		Or(a=false, b=instruction[3], out=destBitM);
		Or(a=false, b=instruction[4], out=destBitD);
		Or(a=false, b=instruction[5], out=destBitA);

		Or(a=false, b=instruction[0], out=jgtBit);
		Or(a=false, b=instruction[1], out=jeqBit);
		Or(a=false, b=instruction[2], out=jltBit);
		
		Or(a=false, b=instruction[12], out=regSelectBit);
		Or(a=false, b=instruction[15], out=opCode);
		
		Or(a=outZR, b=outLT, out=outLEQ);
		Not(in=outLEQ, out=outGT);
		
		And(a=jgtBit, b=outGT, out=jgt);
		And(a=jeqBit, b=outZR, out=jeq);
		And(a=jltBit, b=outLT, out=jlt);
		Or(a=jeq, b=jlt, out=jle);
		Or(a=jeq, b=jgt, out=jge);
		Or(a=jgt, b=jle, out=jmp);
		And(a=opCode, b=jmp, out=loadPC);
		Not(in=loadPC, out=incPC);

		Not(in=opCode, out=opIsAddress);
		Or(a=opIsAddress, b=destBitA, out=loadARegister);

		Mux16(a=instruction, b=aluOut, sel=opCode, out=aRegisterIn);
		ARegister(in=aRegisterIn, load=loadARegister, out=aRegisterOut);
		Mux16(a=aRegisterOut, b=inM, sel=regSelectBit, out=aluYInput);

		And(a=opCode, b=destBitD, out=loadDRegister);
		DRegister(in=aluOut, load=loadDRegister, out=aluXInput);
		ALU(x=aluXInput, y=aluYInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=outZR, ng=outLT);

		PC(in=aRegisterOut, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);

		Or16(a=false, b=aluOut, out=outM);
		And(a=opCode, b=destBitM, out=writeM);
		Or16(a=false, b=aRegisterOut, out[0..14]=addressM);
}